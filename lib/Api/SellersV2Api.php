<?php
/**
 * SellersV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API v.1.0
 *
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * The version of the OpenAPI document: v.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Criteo\Marketing\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Criteo\Marketing\ApiException;
use Criteo\Marketing\Configuration;
use Criteo\Marketing\HeaderSelector;
use Criteo\Marketing\ObjectSerializer;

/**
 * SellersV2Api Class Doc Comment
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SellersV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSellerBudgets
     *
     * Create a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\CreateSellerBudgetMapiMessage[] $create_seller_budgets create_seller_budgets (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBudgetMessage[]
     */
    public function createSellerBudgets($authorization, $create_seller_budgets)
    {
        list($response) = $this->createSellerBudgetsWithHttpInfo($authorization, $create_seller_budgets);
        return $response;
    }

    /**
     * Operation createSellerBudgetsWithHttpInfo
     *
     * Create a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\CreateSellerBudgetMapiMessage[] $create_seller_budgets (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBudgetMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createSellerBudgetsWithHttpInfo($authorization, $create_seller_budgets)
    {
        $request = $this->createSellerBudgetsRequest($authorization, $create_seller_budgets);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBudgetMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBudgetMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBudgetMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSellerBudgetsAsync
     *
     * Create a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\CreateSellerBudgetMapiMessage[] $create_seller_budgets (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSellerBudgetsAsync($authorization, $create_seller_budgets)
    {
        return $this->createSellerBudgetsAsyncWithHttpInfo($authorization, $create_seller_budgets)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSellerBudgetsAsyncWithHttpInfo
     *
     * Create a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\CreateSellerBudgetMapiMessage[] $create_seller_budgets (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSellerBudgetsAsyncWithHttpInfo($authorization, $create_seller_budgets)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
        $request = $this->createSellerBudgetsRequest($authorization, $create_seller_budgets);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSellerBudgets'
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\CreateSellerBudgetMapiMessage[] $create_seller_budgets (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSellerBudgetsRequest($authorization, $create_seller_budgets)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createSellerBudgets'
            );
        }
        // verify the required parameter 'create_seller_budgets' is set
        if ($create_seller_budgets === null || (is_array($create_seller_budgets) && count($create_seller_budgets) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_seller_budgets when calling createSellerBudgets'
            );
        }

        $resourcePath = '/v2/crp/budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($create_seller_budgets)) {
            $_tempBody = $create_seller_budgets;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserCampaigns
     *
     * Get the collection of CRP campaigns associated with the advertiserId.
     *
     * @param  int $advertiser_id advertiser_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\AdvertiserCampaignMessage[]
     */
    public function getAdvertiserCampaigns($advertiser_id, $authorization)
    {
        list($response) = $this->getAdvertiserCampaignsWithHttpInfo($advertiser_id, $authorization);
        return $response;
    }

    /**
     * Operation getAdvertiserCampaignsWithHttpInfo
     *
     * Get the collection of CRP campaigns associated with the advertiserId.
     *
     * @param  int $advertiser_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\AdvertiserCampaignMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserCampaignsWithHttpInfo($advertiser_id, $authorization)
    {
        $request = $this->getAdvertiserCampaignsRequest($advertiser_id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\AdvertiserCampaignMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\AdvertiserCampaignMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\AdvertiserCampaignMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\AdvertiserCampaignMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserCampaignsAsync
     *
     * Get the collection of CRP campaigns associated with the advertiserId.
     *
     * @param  int $advertiser_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCampaignsAsync($advertiser_id, $authorization)
    {
        return $this->getAdvertiserCampaignsAsyncWithHttpInfo($advertiser_id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserCampaignsAsyncWithHttpInfo
     *
     * Get the collection of CRP campaigns associated with the advertiserId.
     *
     * @param  int $advertiser_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCampaignsAsyncWithHttpInfo($advertiser_id, $authorization)
    {
        $returnType = '\Criteo\Marketing\Model\AdvertiserCampaignMessage[]';
        $request = $this->getAdvertiserCampaignsRequest($advertiser_id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserCampaigns'
     *
     * @param  int $advertiser_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAdvertiserCampaignsRequest($advertiser_id, $authorization)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserCampaigns'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getAdvertiserCampaigns'
            );
        }

        $resourcePath = '/v2/crp/advertisers/{advertiserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertisers
     *
     * Get the collection of advertisers associated with the user.
     *
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\AdvertiserInfoMessage[]
     */
    public function getAdvertisers($authorization)
    {
        list($response) = $this->getAdvertisersWithHttpInfo($authorization);
        return $response;
    }

    /**
     * Operation getAdvertisersWithHttpInfo
     *
     * Get the collection of advertisers associated with the user.
     *
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\AdvertiserInfoMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertisersWithHttpInfo($authorization)
    {
        $request = $this->getAdvertisersRequest($authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\AdvertiserInfoMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\AdvertiserInfoMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\AdvertiserInfoMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\AdvertiserInfoMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertisersAsync
     *
     * Get the collection of advertisers associated with the user.
     *
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertisersAsync($authorization)
    {
        return $this->getAdvertisersAsyncWithHttpInfo($authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertisersAsyncWithHttpInfo
     *
     * Get the collection of advertisers associated with the user.
     *
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertisersAsyncWithHttpInfo($authorization)
    {
        $returnType = '\Criteo\Marketing\Model\AdvertiserInfoMessage[]';
        $request = $this->getAdvertisersRequest($authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertisers'
     *
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAdvertisersRequest($authorization)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getAdvertisers'
            );
        }

        $resourcePath = '/v2/crp/advertisers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBudgetsBySeller
     *
     * Get a collection of budgets for this seller.
     *
     * @param  string $seller_id Return only budgets belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBudgetMessage[]|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getBudgetsBySeller($seller_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $type = null)
    {
        list($response) = $this->getBudgetsBySellerWithHttpInfo($seller_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $type);
        return $response;
    }

    /**
     * Operation getBudgetsBySellerWithHttpInfo
     *
     * Get a collection of budgets for this seller.
     *
     * @param  string $seller_id Return only budgets belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBudgetMessage[]|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBudgetsBySellerWithHttpInfo($seller_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $type = null)
    {
        $request = $this->getBudgetsBySellerRequest($seller_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBudgetMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBudgetMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBudgetMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBudgetsBySellerAsync
     *
     * Get a collection of budgets for this seller.
     *
     * @param  string $seller_id Return only budgets belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBudgetsBySellerAsync($seller_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $type = null)
    {
        return $this->getBudgetsBySellerAsyncWithHttpInfo($seller_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBudgetsBySellerAsyncWithHttpInfo
     *
     * Get a collection of budgets for this seller.
     *
     * @param  string $seller_id Return only budgets belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBudgetsBySellerAsyncWithHttpInfo($seller_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $type = null)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
        $request = $this->getBudgetsBySellerRequest($seller_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBudgetsBySeller'
     *
     * @param  string $seller_id Return only budgets belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBudgetsBySellerRequest($seller_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $type = null)
    {
        // verify the required parameter 'seller_id' is set
        if ($seller_id === null || (is_array($seller_id) && count($seller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_id when calling getBudgetsBySeller'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getBudgetsBySeller'
            );
        }

        $resourcePath = '/v2/crp/sellers/{sellerId}/budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($with_balance !== null) {
            $queryParams['withBalance'] = ObjectSerializer::toQueryValue($with_balance);
        }
        // query params
        if ($with_spend !== null) {
            $queryParams['withSpend'] = ObjectSerializer::toQueryValue($with_spend);
        }
        // query params
        if ($end_after_date !== null) {
            $queryParams['endAfterDate'] = ObjectSerializer::toQueryValue($end_after_date);
        }
        // query params
        if ($start_before_date !== null) {
            $queryParams['startBeforeDate'] = ObjectSerializer::toQueryValue($start_before_date);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignId'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($seller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sellerId' . '}',
                ObjectSerializer::toPathValue($seller_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBudgetsBySellerCampaignId
     *
     * Get a collection of budgets for this seller campaign.
     *
     * @param  string $seller_campaign_id Return only budgets belonging to the given seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with a positive balance. (optional)
     * @param  bool $with_spend Return budgets with a positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBudgetMessage[]|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getBudgetsBySellerCampaignId($seller_campaign_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $type = null)
    {
        list($response) = $this->getBudgetsBySellerCampaignIdWithHttpInfo($seller_campaign_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $type);
        return $response;
    }

    /**
     * Operation getBudgetsBySellerCampaignIdWithHttpInfo
     *
     * Get a collection of budgets for this seller campaign.
     *
     * @param  string $seller_campaign_id Return only budgets belonging to the given seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with a positive balance. (optional)
     * @param  bool $with_spend Return budgets with a positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBudgetMessage[]|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBudgetsBySellerCampaignIdWithHttpInfo($seller_campaign_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $type = null)
    {
        $request = $this->getBudgetsBySellerCampaignIdRequest($seller_campaign_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBudgetMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBudgetMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBudgetMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBudgetsBySellerCampaignIdAsync
     *
     * Get a collection of budgets for this seller campaign.
     *
     * @param  string $seller_campaign_id Return only budgets belonging to the given seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with a positive balance. (optional)
     * @param  bool $with_spend Return budgets with a positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBudgetsBySellerCampaignIdAsync($seller_campaign_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $type = null)
    {
        return $this->getBudgetsBySellerCampaignIdAsyncWithHttpInfo($seller_campaign_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBudgetsBySellerCampaignIdAsyncWithHttpInfo
     *
     * Get a collection of budgets for this seller campaign.
     *
     * @param  string $seller_campaign_id Return only budgets belonging to the given seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with a positive balance. (optional)
     * @param  bool $with_spend Return budgets with a positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBudgetsBySellerCampaignIdAsyncWithHttpInfo($seller_campaign_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $type = null)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
        $request = $this->getBudgetsBySellerCampaignIdRequest($seller_campaign_id, $authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBudgetsBySellerCampaignId'
     *
     * @param  string $seller_campaign_id Return only budgets belonging to the given seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with a positive balance. (optional)
     * @param  bool $with_spend Return budgets with a positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBudgetsBySellerCampaignIdRequest($seller_campaign_id, $authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $type = null)
    {
        // verify the required parameter 'seller_campaign_id' is set
        if ($seller_campaign_id === null || (is_array($seller_campaign_id) && count($seller_campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_campaign_id when calling getBudgetsBySellerCampaignId'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getBudgetsBySellerCampaignId'
            );
        }

        $resourcePath = '/v2/crp/seller-campaigns/{sellerCampaignId}/budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($with_balance !== null) {
            $queryParams['withBalance'] = ObjectSerializer::toQueryValue($with_balance);
        }
        // query params
        if ($with_spend !== null) {
            $queryParams['withSpend'] = ObjectSerializer::toQueryValue($with_spend);
        }
        // query params
        if ($end_after_date !== null) {
            $queryParams['endAfterDate'] = ObjectSerializer::toQueryValue($end_after_date);
        }
        // query params
        if ($start_before_date !== null) {
            $queryParams['startBeforeDate'] = ObjectSerializer::toQueryValue($start_before_date);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($seller_campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sellerCampaignId' . '}',
                ObjectSerializer::toPathValue($seller_campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSeller
     *
     * Get details for a seller.
     *
     * @param  string $seller_id Id of the seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBase|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getSeller($seller_id, $authorization)
    {
        list($response) = $this->getSellerWithHttpInfo($seller_id, $authorization);
        return $response;
    }

    /**
     * Operation getSellerWithHttpInfo
     *
     * Get details for a seller.
     *
     * @param  string $seller_id Id of the seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBase|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellerWithHttpInfo($seller_id, $authorization)
    {
        $request = $this->getSellerRequest($seller_id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBase' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBase', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBase';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSellerAsync
     *
     * Get details for a seller.
     *
     * @param  string $seller_id Id of the seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerAsync($seller_id, $authorization)
    {
        return $this->getSellerAsyncWithHttpInfo($seller_id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSellerAsyncWithHttpInfo
     *
     * Get details for a seller.
     *
     * @param  string $seller_id Id of the seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerAsyncWithHttpInfo($seller_id, $authorization)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBase';
        $request = $this->getSellerRequest($seller_id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSeller'
     *
     * @param  string $seller_id Id of the seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSellerRequest($seller_id, $authorization)
    {
        // verify the required parameter 'seller_id' is set
        if ($seller_id === null || (is_array($seller_id) && count($seller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_id when calling getSeller'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getSeller'
            );
        }

        $resourcePath = '/v2/crp/sellers/{sellerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($seller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sellerId' . '}',
                ObjectSerializer::toPathValue($seller_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSellerBudget
     *
     * Get details for a budget.
     *
     * @param  int $budget_id budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBudgetMessage|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getSellerBudget($budget_id, $authorization)
    {
        list($response) = $this->getSellerBudgetWithHttpInfo($budget_id, $authorization);
        return $response;
    }

    /**
     * Operation getSellerBudgetWithHttpInfo
     *
     * Get details for a budget.
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBudgetMessage|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellerBudgetWithHttpInfo($budget_id, $authorization)
    {
        $request = $this->getSellerBudgetRequest($budget_id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBudgetMessage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBudgetMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBudgetMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSellerBudgetAsync
     *
     * Get details for a budget.
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerBudgetAsync($budget_id, $authorization)
    {
        return $this->getSellerBudgetAsyncWithHttpInfo($budget_id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSellerBudgetAsyncWithHttpInfo
     *
     * Get details for a budget.
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerBudgetAsyncWithHttpInfo($budget_id, $authorization)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage';
        $request = $this->getSellerBudgetRequest($budget_id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSellerBudget'
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSellerBudgetRequest($budget_id, $authorization)
    {
        // verify the required parameter 'budget_id' is set
        if ($budget_id === null || (is_array($budget_id) && count($budget_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $budget_id when calling getSellerBudget'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getSellerBudget'
            );
        }

        $resourcePath = '/v2/crp/budgets/{budgetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($budget_id !== null) {
            $resourcePath = str_replace(
                '{' . 'budgetId' . '}',
                ObjectSerializer::toPathValue($budget_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSellerBudgets
     *
     * Get a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $seller_id Return only budgets belonging to the given seller. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBudgetMessage[]|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getSellerBudgets($authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $seller_id = null, $type = null)
    {
        list($response) = $this->getSellerBudgetsWithHttpInfo($authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $seller_id, $type);
        return $response;
    }

    /**
     * Operation getSellerBudgetsWithHttpInfo
     *
     * Get a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $seller_id Return only budgets belonging to the given seller. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBudgetMessage[]|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellerBudgetsWithHttpInfo($authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $seller_id = null, $type = null)
    {
        $request = $this->getSellerBudgetsRequest($authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $seller_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBudgetMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBudgetMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBudgetMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSellerBudgetsAsync
     *
     * Get a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $seller_id Return only budgets belonging to the given seller. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerBudgetsAsync($authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $seller_id = null, $type = null)
    {
        return $this->getSellerBudgetsAsyncWithHttpInfo($authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $seller_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSellerBudgetsAsyncWithHttpInfo
     *
     * Get a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $seller_id Return only budgets belonging to the given seller. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerBudgetsAsyncWithHttpInfo($authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $seller_id = null, $type = null)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
        $request = $this->getSellerBudgetsRequest($authorization, $status, $with_balance, $with_spend, $end_after_date, $start_before_date, $campaign_id, $seller_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSellerBudgets'
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $status Return only budgets with the given status. (optional)
     * @param  bool $with_balance Return only budgets with the given status. (optional)
     * @param  bool $with_spend Return budgets with any positive spend. (optional)
     * @param  \DateTime $end_after_date Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param  \DateTime $start_before_date Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param  int $campaign_id Return only budgets that pay for a given campaign. (optional)
     * @param  string $seller_id Return only budgets belonging to the given seller. (optional)
     * @param  string $type Return only budgets with the given budget type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSellerBudgetsRequest($authorization, $status = null, $with_balance = null, $with_spend = null, $end_after_date = null, $start_before_date = null, $campaign_id = null, $seller_id = null, $type = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getSellerBudgets'
            );
        }

        $resourcePath = '/v2/crp/budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($with_balance !== null) {
            $queryParams['withBalance'] = ObjectSerializer::toQueryValue($with_balance);
        }
        // query params
        if ($with_spend !== null) {
            $queryParams['withSpend'] = ObjectSerializer::toQueryValue($with_spend);
        }
        // query params
        if ($end_after_date !== null) {
            $queryParams['endAfterDate'] = ObjectSerializer::toQueryValue($end_after_date);
        }
        // query params
        if ($start_before_date !== null) {
            $queryParams['startBeforeDate'] = ObjectSerializer::toQueryValue($start_before_date);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignId'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($seller_id !== null) {
            $queryParams['sellerId'] = ObjectSerializer::toQueryValue($seller_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSellerCampaign
     *
     * Get details for a seller campaign.
     *
     * @param  string $seller_campaign_id Id of the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerCampaignMessage|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getSellerCampaign($seller_campaign_id, $authorization)
    {
        list($response) = $this->getSellerCampaignWithHttpInfo($seller_campaign_id, $authorization);
        return $response;
    }

    /**
     * Operation getSellerCampaignWithHttpInfo
     *
     * Get details for a seller campaign.
     *
     * @param  string $seller_campaign_id Id of the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerCampaignMessage|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellerCampaignWithHttpInfo($seller_campaign_id, $authorization)
    {
        $request = $this->getSellerCampaignRequest($seller_campaign_id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerCampaignMessage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerCampaignMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerCampaignMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSellerCampaignAsync
     *
     * Get details for a seller campaign.
     *
     * @param  string $seller_campaign_id Id of the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerCampaignAsync($seller_campaign_id, $authorization)
    {
        return $this->getSellerCampaignAsyncWithHttpInfo($seller_campaign_id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSellerCampaignAsyncWithHttpInfo
     *
     * Get details for a seller campaign.
     *
     * @param  string $seller_campaign_id Id of the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerCampaignAsyncWithHttpInfo($seller_campaign_id, $authorization)
    {
        $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage';
        $request = $this->getSellerCampaignRequest($seller_campaign_id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSellerCampaign'
     *
     * @param  string $seller_campaign_id Id of the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSellerCampaignRequest($seller_campaign_id, $authorization)
    {
        // verify the required parameter 'seller_campaign_id' is set
        if ($seller_campaign_id === null || (is_array($seller_campaign_id) && count($seller_campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_campaign_id when calling getSellerCampaign'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getSellerCampaign'
            );
        }

        $resourcePath = '/v2/crp/seller-campaigns/{sellerCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($seller_campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sellerCampaignId' . '}',
                ObjectSerializer::toPathValue($seller_campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSellerCampaigns
     *
     * Get a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerCampaignMessage[]|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getSellerCampaigns($authorization, $seller_status = null, $seller_id = null, $campaign_id = null, $budget_status = null)
    {
        list($response) = $this->getSellerCampaignsWithHttpInfo($authorization, $seller_status, $seller_id, $campaign_id, $budget_status);
        return $response;
    }

    /**
     * Operation getSellerCampaignsWithHttpInfo
     *
     * Get a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerCampaignMessage[]|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellerCampaignsWithHttpInfo($authorization, $seller_status = null, $seller_id = null, $campaign_id = null, $budget_status = null)
    {
        $request = $this->getSellerCampaignsRequest($authorization, $seller_status, $seller_id, $campaign_id, $budget_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerCampaignMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerCampaignMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerCampaignMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSellerCampaignsAsync
     *
     * Get a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerCampaignsAsync($authorization, $seller_status = null, $seller_id = null, $campaign_id = null, $budget_status = null)
    {
        return $this->getSellerCampaignsAsyncWithHttpInfo($authorization, $seller_status, $seller_id, $campaign_id, $budget_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSellerCampaignsAsyncWithHttpInfo
     *
     * Get a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerCampaignsAsyncWithHttpInfo($authorization, $seller_status = null, $seller_id = null, $campaign_id = null, $budget_status = null)
    {
        $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage[]';
        $request = $this->getSellerCampaignsRequest($authorization, $seller_status, $seller_id, $campaign_id, $budget_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSellerCampaigns'
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSellerCampaignsRequest($authorization, $seller_status = null, $seller_id = null, $campaign_id = null, $budget_status = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getSellerCampaigns'
            );
        }

        $resourcePath = '/v2/crp/seller-campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($seller_status !== null) {
            $queryParams['sellerStatus'] = ObjectSerializer::toQueryValue($seller_status);
        }
        // query params
        if ($seller_id !== null) {
            $queryParams['sellerId'] = ObjectSerializer::toQueryValue($seller_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignId'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($budget_status !== null) {
            $queryParams['budgetStatus'] = ObjectSerializer::toQueryValue($budget_status);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSellerCampaignsBySeller
     *
     * Get a collection of seller campaigns for this seller.
     *
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerCampaignMessage[]|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getSellerCampaignsBySeller($seller_id, $authorization, $seller_status = null, $campaign_id = null, $budget_status = null)
    {
        list($response) = $this->getSellerCampaignsBySellerWithHttpInfo($seller_id, $authorization, $seller_status, $campaign_id, $budget_status);
        return $response;
    }

    /**
     * Operation getSellerCampaignsBySellerWithHttpInfo
     *
     * Get a collection of seller campaigns for this seller.
     *
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerCampaignMessage[]|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellerCampaignsBySellerWithHttpInfo($seller_id, $authorization, $seller_status = null, $campaign_id = null, $budget_status = null)
    {
        $request = $this->getSellerCampaignsBySellerRequest($seller_id, $authorization, $seller_status, $campaign_id, $budget_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerCampaignMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerCampaignMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerCampaignMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSellerCampaignsBySellerAsync
     *
     * Get a collection of seller campaigns for this seller.
     *
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerCampaignsBySellerAsync($seller_id, $authorization, $seller_status = null, $campaign_id = null, $budget_status = null)
    {
        return $this->getSellerCampaignsBySellerAsyncWithHttpInfo($seller_id, $authorization, $seller_status, $campaign_id, $budget_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSellerCampaignsBySellerAsyncWithHttpInfo
     *
     * Get a collection of seller campaigns for this seller.
     *
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellerCampaignsBySellerAsyncWithHttpInfo($seller_id, $authorization, $seller_status = null, $campaign_id = null, $budget_status = null)
    {
        $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage[]';
        $request = $this->getSellerCampaignsBySellerRequest($seller_id, $authorization, $seller_status, $campaign_id, $budget_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSellerCampaignsBySeller'
     *
     * @param  string $seller_id Return only seller campaigns belonging to the given seller. (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only seller campaigns for sellers with the given status. (optional)
     * @param  int $campaign_id Return only seller campaigns associated with the given campaign. (optional)
     * @param  string $budget_status Return only seller campaigns whose budget has the given status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSellerCampaignsBySellerRequest($seller_id, $authorization, $seller_status = null, $campaign_id = null, $budget_status = null)
    {
        // verify the required parameter 'seller_id' is set
        if ($seller_id === null || (is_array($seller_id) && count($seller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_id when calling getSellerCampaignsBySeller'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getSellerCampaignsBySeller'
            );
        }

        $resourcePath = '/v2/crp/sellers/{sellerId}/seller-campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($seller_status !== null) {
            $queryParams['sellerStatus'] = ObjectSerializer::toQueryValue($seller_status);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaignId'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($budget_status !== null) {
            $queryParams['budgetStatus'] = ObjectSerializer::toQueryValue($budget_status);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($seller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sellerId' . '}',
                ObjectSerializer::toPathValue($seller_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSellers
     *
     * Get a collection of sellers.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only sellers with specific status. (optional)
     * @param  bool $with_products Return only sellers with or without products in catalog. (optional)
     * @param  string $with_budget_status Return only sellers with specific budget status. (optional)
     * @param  string $seller_name Return only sellers with the matching name. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBase[]|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function getSellers($authorization, $seller_status = null, $with_products = null, $with_budget_status = null, $seller_name = null)
    {
        list($response) = $this->getSellersWithHttpInfo($authorization, $seller_status, $with_products, $with_budget_status, $seller_name);
        return $response;
    }

    /**
     * Operation getSellersWithHttpInfo
     *
     * Get a collection of sellers.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only sellers with specific status. (optional)
     * @param  bool $with_products Return only sellers with or without products in catalog. (optional)
     * @param  string $with_budget_status Return only sellers with specific budget status. (optional)
     * @param  string $seller_name Return only sellers with the matching name. (optional)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBase[]|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellersWithHttpInfo($authorization, $seller_status = null, $with_products = null, $with_budget_status = null, $seller_name = null)
    {
        $request = $this->getSellersRequest($authorization, $seller_status, $with_products, $with_budget_status, $seller_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBase[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBase[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBase[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSellersAsync
     *
     * Get a collection of sellers.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only sellers with specific status. (optional)
     * @param  bool $with_products Return only sellers with or without products in catalog. (optional)
     * @param  string $with_budget_status Return only sellers with specific budget status. (optional)
     * @param  string $seller_name Return only sellers with the matching name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellersAsync($authorization, $seller_status = null, $with_products = null, $with_budget_status = null, $seller_name = null)
    {
        return $this->getSellersAsyncWithHttpInfo($authorization, $seller_status, $with_products, $with_budget_status, $seller_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSellersAsyncWithHttpInfo
     *
     * Get a collection of sellers.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only sellers with specific status. (optional)
     * @param  bool $with_products Return only sellers with or without products in catalog. (optional)
     * @param  string $with_budget_status Return only sellers with specific budget status. (optional)
     * @param  string $seller_name Return only sellers with the matching name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSellersAsyncWithHttpInfo($authorization, $seller_status = null, $with_products = null, $with_budget_status = null, $seller_name = null)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBase[]';
        $request = $this->getSellersRequest($authorization, $seller_status, $with_products, $with_budget_status, $seller_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSellers'
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  string $seller_status Return only sellers with specific status. (optional)
     * @param  bool $with_products Return only sellers with or without products in catalog. (optional)
     * @param  string $with_budget_status Return only sellers with specific budget status. (optional)
     * @param  string $seller_name Return only sellers with the matching name. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSellersRequest($authorization, $seller_status = null, $with_products = null, $with_budget_status = null, $seller_name = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getSellers'
            );
        }

        $resourcePath = '/v2/crp/sellers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($seller_status !== null) {
            $queryParams['sellerStatus'] = ObjectSerializer::toQueryValue($seller_status);
        }
        // query params
        if ($with_products !== null) {
            $queryParams['withProducts'] = ObjectSerializer::toQueryValue($with_products);
        }
        // query params
        if ($with_budget_status !== null) {
            $queryParams['withBudgetStatus'] = ObjectSerializer::toQueryValue($with_budget_status);
        }
        // query params
        if ($seller_name !== null) {
            $queryParams['sellerName'] = ObjectSerializer::toQueryValue($seller_name);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSellerBudget
     *
     * Modify a single budget.
     *
     * @param  int $budget_id budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessageBase $message message (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBudgetMessage
     */
    public function updateSellerBudget($budget_id, $authorization, $message)
    {
        list($response) = $this->updateSellerBudgetWithHttpInfo($budget_id, $authorization, $message);
        return $response;
    }

    /**
     * Operation updateSellerBudgetWithHttpInfo
     *
     * Modify a single budget.
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessageBase $message (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBudgetMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSellerBudgetWithHttpInfo($budget_id, $authorization, $message)
    {
        $request = $this->updateSellerBudgetRequest($budget_id, $authorization, $message);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBudgetMessage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBudgetMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBudgetMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSellerBudgetAsync
     *
     * Modify a single budget.
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessageBase $message (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerBudgetAsync($budget_id, $authorization, $message)
    {
        return $this->updateSellerBudgetAsyncWithHttpInfo($budget_id, $authorization, $message)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSellerBudgetAsyncWithHttpInfo
     *
     * Modify a single budget.
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessageBase $message (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerBudgetAsyncWithHttpInfo($budget_id, $authorization, $message)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage';
        $request = $this->updateSellerBudgetRequest($budget_id, $authorization, $message);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSellerBudget'
     *
     * @param  int $budget_id (required)
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessageBase $message (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSellerBudgetRequest($budget_id, $authorization, $message)
    {
        // verify the required parameter 'budget_id' is set
        if ($budget_id === null || (is_array($budget_id) && count($budget_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $budget_id when calling updateSellerBudget'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateSellerBudget'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling updateSellerBudget'
            );
        }

        $resourcePath = '/v2/crp/budgets/{budgetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($budget_id !== null) {
            $resourcePath = str_replace(
                '{' . 'budgetId' . '}',
                ObjectSerializer::toPathValue($budget_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($message)) {
            $_tempBody = $message;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSellerBudgets
     *
     * Modify a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessage[] $update_seller_budgets update_seller_budgets (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerBudgetMessage[]
     */
    public function updateSellerBudgets($authorization, $update_seller_budgets)
    {
        list($response) = $this->updateSellerBudgetsWithHttpInfo($authorization, $update_seller_budgets);
        return $response;
    }

    /**
     * Operation updateSellerBudgetsWithHttpInfo
     *
     * Modify a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessage[] $update_seller_budgets (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerBudgetMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSellerBudgetsWithHttpInfo($authorization, $update_seller_budgets)
    {
        $request = $this->updateSellerBudgetsRequest($authorization, $update_seller_budgets);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerBudgetMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerBudgetMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerBudgetMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSellerBudgetsAsync
     *
     * Modify a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessage[] $update_seller_budgets (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerBudgetsAsync($authorization, $update_seller_budgets)
    {
        return $this->updateSellerBudgetsAsyncWithHttpInfo($authorization, $update_seller_budgets)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSellerBudgetsAsyncWithHttpInfo
     *
     * Modify a collection of budgets.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessage[] $update_seller_budgets (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerBudgetsAsyncWithHttpInfo($authorization, $update_seller_budgets)
    {
        $returnType = '\Criteo\Marketing\Model\SellerBudgetMessage[]';
        $request = $this->updateSellerBudgetsRequest($authorization, $update_seller_budgets);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSellerBudgets'
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\UpdateSellerBudgetMessage[] $update_seller_budgets (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSellerBudgetsRequest($authorization, $update_seller_budgets)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateSellerBudgets'
            );
        }
        // verify the required parameter 'update_seller_budgets' is set
        if ($update_seller_budgets === null || (is_array($update_seller_budgets) && count($update_seller_budgets) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_seller_budgets when calling updateSellerBudgets'
            );
        }

        $resourcePath = '/v2/crp/budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($update_seller_budgets)) {
            $_tempBody = $update_seller_budgets;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSellerCampaign
     *
     * Update an existing seller campaign.
     *
     * @param  string $seller_campaign_id Id of the existing seller campaign to update (required)
     * @param  double $bid The new bid for the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerCampaignMessage|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function updateSellerCampaign($seller_campaign_id, $bid, $authorization)
    {
        list($response) = $this->updateSellerCampaignWithHttpInfo($seller_campaign_id, $bid, $authorization);
        return $response;
    }

    /**
     * Operation updateSellerCampaignWithHttpInfo
     *
     * Update an existing seller campaign.
     *
     * @param  string $seller_campaign_id Id of the existing seller campaign to update (required)
     * @param  double $bid The new bid for the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerCampaignMessage|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSellerCampaignWithHttpInfo($seller_campaign_id, $bid, $authorization)
    {
        $request = $this->updateSellerCampaignRequest($seller_campaign_id, $bid, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerCampaignMessage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerCampaignMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerCampaignMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSellerCampaignAsync
     *
     * Update an existing seller campaign.
     *
     * @param  string $seller_campaign_id Id of the existing seller campaign to update (required)
     * @param  double $bid The new bid for the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerCampaignAsync($seller_campaign_id, $bid, $authorization)
    {
        return $this->updateSellerCampaignAsyncWithHttpInfo($seller_campaign_id, $bid, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSellerCampaignAsyncWithHttpInfo
     *
     * Update an existing seller campaign.
     *
     * @param  string $seller_campaign_id Id of the existing seller campaign to update (required)
     * @param  double $bid The new bid for the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerCampaignAsyncWithHttpInfo($seller_campaign_id, $bid, $authorization)
    {
        $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage';
        $request = $this->updateSellerCampaignRequest($seller_campaign_id, $bid, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSellerCampaign'
     *
     * @param  string $seller_campaign_id Id of the existing seller campaign to update (required)
     * @param  double $bid The new bid for the seller campaign. (required)
     * @param  string $authorization JWT Bearer Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSellerCampaignRequest($seller_campaign_id, $bid, $authorization)
    {
        // verify the required parameter 'seller_campaign_id' is set
        if ($seller_campaign_id === null || (is_array($seller_campaign_id) && count($seller_campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_campaign_id when calling updateSellerCampaign'
            );
        }
        // verify the required parameter 'bid' is set
        if ($bid === null || (is_array($bid) && count($bid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bid when calling updateSellerCampaign'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateSellerCampaign'
            );
        }

        $resourcePath = '/v2/crp/seller-campaigns/{sellerCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($bid !== null) {
            $queryParams['bid'] = ObjectSerializer::toQueryValue($bid);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($seller_campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sellerCampaignId' . '}',
                ObjectSerializer::toPathValue($seller_campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSellerCampaigns
     *
     * Update a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\SellerCampaignUpdate[] $campaign_messages campaign_messages (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Criteo\Marketing\Model\SellerCampaignMessage[]|\Criteo\Marketing\Model\ErrorSource[]
     */
    public function updateSellerCampaigns($authorization, $campaign_messages)
    {
        list($response) = $this->updateSellerCampaignsWithHttpInfo($authorization, $campaign_messages);
        return $response;
    }

    /**
     * Operation updateSellerCampaignsWithHttpInfo
     *
     * Update a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\SellerCampaignUpdate[] $campaign_messages (required)
     *
     * @throws \Criteo\Marketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Criteo\Marketing\Model\SellerCampaignMessage[]|\Criteo\Marketing\Model\ErrorSource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSellerCampaignsWithHttpInfo($authorization, $campaign_messages)
    {
        $request = $this->updateSellerCampaignsRequest($authorization, $campaign_messages);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Criteo\Marketing\Model\SellerCampaignMessage[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\SellerCampaignMessage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Criteo\Marketing\Model\ErrorSource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Criteo\Marketing\Model\ErrorSource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\SellerCampaignMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Criteo\Marketing\Model\ErrorSource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSellerCampaignsAsync
     *
     * Update a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\SellerCampaignUpdate[] $campaign_messages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerCampaignsAsync($authorization, $campaign_messages)
    {
        return $this->updateSellerCampaignsAsyncWithHttpInfo($authorization, $campaign_messages)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSellerCampaignsAsyncWithHttpInfo
     *
     * Update a collection of seller campaigns.
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\SellerCampaignUpdate[] $campaign_messages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSellerCampaignsAsyncWithHttpInfo($authorization, $campaign_messages)
    {
        $returnType = '\Criteo\Marketing\Model\SellerCampaignMessage[]';
        $request = $this->updateSellerCampaignsRequest($authorization, $campaign_messages);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSellerCampaigns'
     *
     * @param  string $authorization JWT Bearer Token (required)
     * @param  \Criteo\Marketing\Model\SellerCampaignUpdate[] $campaign_messages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSellerCampaignsRequest($authorization, $campaign_messages)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateSellerCampaigns'
            );
        }
        // verify the required parameter 'campaign_messages' is set
        if ($campaign_messages === null || (is_array($campaign_messages) && count($campaign_messages) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_messages when calling updateSellerCampaigns'
            );
        }

        $resourcePath = '/v2/crp/seller-campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($campaign_messages)) {
            $_tempBody = $campaign_messages;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'text/html'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * ErrorSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API v.1.0
 *
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * The version of the OpenAPI document: v.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Criteo\Marketing\Model;

use \ArrayAccess;
use \Criteo\Marketing\ObjectSerializer;

/**
 * ErrorSource Class Doc Comment
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ErrorSource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ErrorSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'detail' => 'string',
        'status' => 'string',
        'source' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'detail' => null,
        'status' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'detail' => 'detail',
        'status' => 'status',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'detail' => 'setDetail',
        'status' => 'setStatus',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'detail' => 'getDetail',
        'status' => 'getStatus',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS__CONTINUE = 'Continue';
    const STATUS_SWITCHING_PROTOCOLS = 'SwitchingProtocols';
    const STATUS_OK = 'OK';
    const STATUS_CREATED = 'Created';
    const STATUS_ACCEPTED = 'Accepted';
    const STATUS_NON_AUTHORITATIVE_INFORMATION = 'NonAuthoritativeInformation';
    const STATUS_NO_CONTENT = 'NoContent';
    const STATUS_RESET_CONTENT = 'ResetContent';
    const STATUS_PARTIAL_CONTENT = 'PartialContent';
    const STATUS_MULTIPLE_CHOICES = 'MultipleChoices';
    const STATUS_AMBIGUOUS = 'Ambiguous';
    const STATUS_MOVED_PERMANENTLY = 'MovedPermanently';
    const STATUS_MOVED = 'Moved';
    const STATUS_FOUND = 'Found';
    const STATUS_REDIRECT = 'Redirect';
    const STATUS_SEE_OTHER = 'SeeOther';
    const STATUS_REDIRECT_METHOD = 'RedirectMethod';
    const STATUS_NOT_MODIFIED = 'NotModified';
    const STATUS_USE_PROXY = 'UseProxy';
    const STATUS_UNUSED = 'Unused';
    const STATUS_TEMPORARY_REDIRECT = 'TemporaryRedirect';
    const STATUS_REDIRECT_KEEP_VERB = 'RedirectKeepVerb';
    const STATUS_BAD_REQUEST = 'BadRequest';
    const STATUS_UNAUTHORIZED = 'Unauthorized';
    const STATUS_PAYMENT_REQUIRED = 'PaymentRequired';
    const STATUS_FORBIDDEN = 'Forbidden';
    const STATUS_NOT_FOUND = 'NotFound';
    const STATUS_METHOD_NOT_ALLOWED = 'MethodNotAllowed';
    const STATUS_NOT_ACCEPTABLE = 'NotAcceptable';
    const STATUS_PROXY_AUTHENTICATION_REQUIRED = 'ProxyAuthenticationRequired';
    const STATUS_REQUEST_TIMEOUT = 'RequestTimeout';
    const STATUS_CONFLICT = 'Conflict';
    const STATUS_GONE = 'Gone';
    const STATUS_LENGTH_REQUIRED = 'LengthRequired';
    const STATUS_PRECONDITION_FAILED = 'PreconditionFailed';
    const STATUS_REQUEST_ENTITY_TOO_LARGE = 'RequestEntityTooLarge';
    const STATUS_REQUEST_URI_TOO_LONG = 'RequestUriTooLong';
    const STATUS_UNSUPPORTED_MEDIA_TYPE = 'UnsupportedMediaType';
    const STATUS_REQUESTED_RANGE_NOT_SATISFIABLE = 'RequestedRangeNotSatisfiable';
    const STATUS_EXPECTATION_FAILED = 'ExpectationFailed';
    const STATUS_UPGRADE_REQUIRED = 'UpgradeRequired';
    const STATUS_INTERNAL_SERVER_ERROR = 'InternalServerError';
    const STATUS_NOT_IMPLEMENTED = 'NotImplemented';
    const STATUS_BAD_GATEWAY = 'BadGateway';
    const STATUS_SERVICE_UNAVAILABLE = 'ServiceUnavailable';
    const STATUS_GATEWAY_TIMEOUT = 'GatewayTimeout';
    const STATUS_HTTP_VERSION_NOT_SUPPORTED = 'HttpVersionNotSupported';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__CONTINUE,
            self::STATUS_SWITCHING_PROTOCOLS,
            self::STATUS_OK,
            self::STATUS_CREATED,
            self::STATUS_ACCEPTED,
            self::STATUS_NON_AUTHORITATIVE_INFORMATION,
            self::STATUS_NO_CONTENT,
            self::STATUS_RESET_CONTENT,
            self::STATUS_PARTIAL_CONTENT,
            self::STATUS_MULTIPLE_CHOICES,
            self::STATUS_AMBIGUOUS,
            self::STATUS_MOVED_PERMANENTLY,
            self::STATUS_MOVED,
            self::STATUS_FOUND,
            self::STATUS_REDIRECT,
            self::STATUS_SEE_OTHER,
            self::STATUS_REDIRECT_METHOD,
            self::STATUS_NOT_MODIFIED,
            self::STATUS_USE_PROXY,
            self::STATUS_UNUSED,
            self::STATUS_TEMPORARY_REDIRECT,
            self::STATUS_REDIRECT_KEEP_VERB,
            self::STATUS_BAD_REQUEST,
            self::STATUS_UNAUTHORIZED,
            self::STATUS_PAYMENT_REQUIRED,
            self::STATUS_FORBIDDEN,
            self::STATUS_NOT_FOUND,
            self::STATUS_METHOD_NOT_ALLOWED,
            self::STATUS_NOT_ACCEPTABLE,
            self::STATUS_PROXY_AUTHENTICATION_REQUIRED,
            self::STATUS_REQUEST_TIMEOUT,
            self::STATUS_CONFLICT,
            self::STATUS_GONE,
            self::STATUS_LENGTH_REQUIRED,
            self::STATUS_PRECONDITION_FAILED,
            self::STATUS_REQUEST_ENTITY_TOO_LARGE,
            self::STATUS_REQUEST_URI_TOO_LONG,
            self::STATUS_UNSUPPORTED_MEDIA_TYPE,
            self::STATUS_REQUESTED_RANGE_NOT_SATISFIABLE,
            self::STATUS_EXPECTATION_FAILED,
            self::STATUS_UPGRADE_REQUIRED,
            self::STATUS_INTERNAL_SERVER_ERROR,
            self::STATUS_NOT_IMPLEMENTED,
            self::STATUS_BAD_GATEWAY,
            self::STATUS_SERVICE_UNAVAILABLE,
            self::STATUS_GATEWAY_TIMEOUT,
            self::STATUS_HTTP_VERSION_NOT_SUPPORTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['detail'] = isset($data['detail']) ? $data['detail'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets detail
     *
     * @return string|null
     */
    public function getDetail()
    {
        return $this->container['detail'];
    }

    /**
     * Sets detail
     *
     * @param string|null $detail detail
     *
     * @return $this
     */
    public function setDetail($detail)
    {
        $this->container['detail'] = $detail;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets source
     *
     * @return map[string,string]|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param map[string,string]|null $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



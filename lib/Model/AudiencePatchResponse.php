<?php
/**
 * AudiencePatchResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketing API v.1.0
 *
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * The version of the OpenAPI document: v.1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Criteo\Marketing\Model;

use \ArrayAccess;
use \Criteo\Marketing\ObjectSerializer;

/**
 * AudiencePatchResponse Class Doc Comment
 *
 * @category Class
 * @package  Criteo\Marketing
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AudiencePatchResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AudiencePatchResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'operation' => 'string',
        'request_date' => '\DateTime',
        'schema' => 'string',
        'nb_valid_identifiers' => 'int',
        'nb_invalid_identifiers' => 'int',
        'sample_invalid_identifiers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'operation' => null,
        'request_date' => 'date-time',
        'schema' => null,
        'nb_valid_identifiers' => 'int32',
        'nb_invalid_identifiers' => 'int32',
        'sample_invalid_identifiers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'request_date' => 'requestDate',
        'schema' => 'schema',
        'nb_valid_identifiers' => 'nbValidIdentifiers',
        'nb_invalid_identifiers' => 'nbInvalidIdentifiers',
        'sample_invalid_identifiers' => 'sampleInvalidIdentifiers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'request_date' => 'setRequestDate',
        'schema' => 'setSchema',
        'nb_valid_identifiers' => 'setNbValidIdentifiers',
        'nb_invalid_identifiers' => 'setNbInvalidIdentifiers',
        'sample_invalid_identifiers' => 'setSampleInvalidIdentifiers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'request_date' => 'getRequestDate',
        'schema' => 'getSchema',
        'nb_valid_identifiers' => 'getNbValidIdentifiers',
        'nb_invalid_identifiers' => 'getNbInvalidIdentifiers',
        'sample_invalid_identifiers' => 'getSampleInvalidIdentifiers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['request_date'] = isset($data['request_date']) ? $data['request_date'] : null;
        $this->container['schema'] = isset($data['schema']) ? $data['schema'] : null;
        $this->container['nb_valid_identifiers'] = isset($data['nb_valid_identifiers']) ? $data['nb_valid_identifiers'] : null;
        $this->container['nb_invalid_identifiers'] = isset($data['nb_invalid_identifiers']) ? $data['nb_invalid_identifiers'] : null;
        $this->container['sample_invalid_identifiers'] = isset($data['sample_invalid_identifiers']) ? $data['sample_invalid_identifiers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return string|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string|null $operation The Operation recorded.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets request_date
     *
     * @return \DateTime|null
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     *
     * @param \DateTime|null $request_date When the Operation was recorded.
     *
     * @return $this
     */
    public function setRequestDate($request_date)
    {
        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return string|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param string|null $schema The schema specified for the identifiers.
     *
     * @return $this
     */
    public function setSchema($schema)
    {
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets nb_valid_identifiers
     *
     * @return int|null
     */
    public function getNbValidIdentifiers()
    {
        return $this->container['nb_valid_identifiers'];
    }

    /**
     * Sets nb_valid_identifiers
     *
     * @param int|null $nb_valid_identifiers nb_valid_identifiers
     *
     * @return $this
     */
    public function setNbValidIdentifiers($nb_valid_identifiers)
    {
        $this->container['nb_valid_identifiers'] = $nb_valid_identifiers;

        return $this;
    }

    /**
     * Gets nb_invalid_identifiers
     *
     * @return int|null
     */
    public function getNbInvalidIdentifiers()
    {
        return $this->container['nb_invalid_identifiers'];
    }

    /**
     * Sets nb_invalid_identifiers
     *
     * @param int|null $nb_invalid_identifiers nb_invalid_identifiers
     *
     * @return $this
     */
    public function setNbInvalidIdentifiers($nb_invalid_identifiers)
    {
        $this->container['nb_invalid_identifiers'] = $nb_invalid_identifiers;

        return $this;
    }

    /**
     * Gets sample_invalid_identifiers
     *
     * @return string[]|null
     */
    public function getSampleInvalidIdentifiers()
    {
        return $this->container['sample_invalid_identifiers'];
    }

    /**
     * Sets sample_invalid_identifiers
     *
     * @param string[]|null $sample_invalid_identifiers Optionnal. A sample of invalid identifiers if there is some.
     *
     * @return $this
     */
    public function setSampleInvalidIdentifiers($sample_invalid_identifiers)
    {
        $this->container['sample_invalid_identifiers'] = $sample_invalid_identifiers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


